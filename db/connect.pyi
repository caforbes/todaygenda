from datetime import datetime, timedelta
from typing import Any, Iterable, Union

UserDict = dict[str, int]
TaskDict = dict[str, Union[str, int, timedelta, bool]]
DaylistDict = dict[str, Union[int, datetime, list[TaskDict]]]

class DBQueriesWrapper:
    """Wrapper for dynamically imported SQL functions - typing and autocomplete."""

    def transaction(self) -> Any: ...

    # Users
    @staticmethod
    def count_users(user_id: int) -> int: ...
    @staticmethod
    def count_anon_users() -> int: ...
    @staticmethod
    def get_user(user_id: int) -> UserDict | None: ...
    @staticmethod
    def get_anon_user() -> UserDict | None: ...
    @staticmethod
    def add_anon_user() -> int: ...
    @staticmethod
    def delete_user(user_id: int) -> int: ...
    @staticmethod
    def delete_all_users() -> int: ...

    # Daylists
    @staticmethod
    def get_active_daylist(user_id: int) -> DaylistDict | None: ...
    @staticmethod
    def add_daylist(user_id: int, expiry: Union[str, datetime]) -> int: ...

    # Tasks
    # read
    @staticmethod
    def count_tasks(daylist_id: int) -> int: ...
    @staticmethod
    def get_task(id: int) -> TaskDict | None: ...
    @staticmethod
    def get_current_tasks(user_id: int) -> Iterable[TaskDict]: ...
    @staticmethod
    def get_pending_tasks(user_id: int) -> Iterable[TaskDict]: ...
    @staticmethod
    def get_done_tasks(user_id: int) -> Iterable[TaskDict]: ...
    # create
    @staticmethod
    def add_task_for_user(user_id: int, title: str, estimate: timedelta) -> int: ...
    @staticmethod
    def add_task_to_list(daylist_id: int, title: str, estimate: timedelta) -> int: ...
    # update
    @staticmethod
    def complete_task(id: int) -> int: ...
    @staticmethod
    def uncomplete_task(id: int) -> int: ...
    # delete
    @staticmethod
    def delete_task(id: int) -> int: ...

def query_connect(url: str) -> DBQueriesWrapper: ...
